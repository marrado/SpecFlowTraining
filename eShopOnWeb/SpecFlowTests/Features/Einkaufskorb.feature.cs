// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WarenInEinkaufswagenHinzufugenFeature : Xunit.IClassFixture<WarenInEinkaufswagenHinzufugenFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Einkaufskorb.feature"
#line hidden
        
        public WarenInEinkaufswagenHinzufugenFeature(WarenInEinkaufswagenHinzufugenFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Waren in Einkaufswagen hinzufügen", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("eine leere in-Memory Datenbank", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Ein Produkt in leeren Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("FeatureTitle", "Waren in Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("Description", "Ein Produkt in leeren Einkaufswagen hinzufügen")]
        public virtual void EinProduktInLeerenEinkaufswagenHinzufugen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ein Produkt in leeren Einkaufswagen hinzufügen", null, ((string[])(null)));
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 10
 testRunner.Given("mein Einkaufswagen ist leer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Angenommen ");
#line 12
 testRunner.When("ich einen Produkt in Einkaufswagen hinzufüge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 14
 testRunner.Then("sollte mein Einkaufswagen 1 Produkt beinhalten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Ein Produkt in nicht leeren Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("FeatureTitle", "Waren in Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("Description", "Ein Produkt in nicht leeren Einkaufswagen hinzufügen")]
        public virtual void EinProduktInNichtLeerenEinkaufswagenHinzufugen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ein Produkt in nicht leeren Einkaufswagen hinzufügen", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 20
 testRunner.Given("mein Einkaufswagen hat schon 2 Produkte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Angenommen ");
#line 22
 testRunner.When("ich einen Produkt in Einkaufswagen hinzufüge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 24
 testRunner.Then("sollte mein Einkaufswagen 3 Produkte beinhalten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Mehrere Produkte in leeren Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("FeatureTitle", "Waren in Einkaufswagen hinzufügen")]
        [Xunit.TraitAttribute("Description", "Mehrere Produkte in leeren Einkaufswagen hinzufügen")]
        [Xunit.InlineDataAttribute("2", new string[0])]
        [Xunit.InlineDataAttribute("4", new string[0])]
        [Xunit.InlineDataAttribute("5", new string[0])]
        public virtual void MehrereProdukteInLeerenEinkaufswagenHinzufugen(string anzahl, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mehrere Produkte in leeren Einkaufswagen hinzufügen", null, exampleTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 30
 testRunner.Given("mein Einkaufswagen ist leer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Angenommen ");
#line 32
 testRunner.When(string.Format("ich {0} Produkte in Einkaufswagen hinzufüge", anzahl), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 34
 testRunner.Then(string.Format("sollte mein Einkaufswagen {0} Produkte beinhalten", anzahl), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WarenInEinkaufswagenHinzufugenFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WarenInEinkaufswagenHinzufugenFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
